#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit
readonly CURRENT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

print_title() {
  local line="--------------------------------------------------------------------------------"

  printf "%s%s%s\n" "+-" "${line:0:${#1}}" "-+"
  printf "%s%s%s\n" "| " "${1}" " |"
  printf "%s%s%s\n" "+-" "${line:0:${#1}}" "-+"
}

usage() {
  printf "Usage: %s [flags]\n" "${0}"
  printf "  -a\tRun all stages: symlinks, clean, install and passwords\n"
  printf "  -c\tClean install and temporary files\n"
  printf "  -i\tInstall and configure softwares\n"
  printf "  -l\tLimiting execution to given filename\n"
  printf "  -p\tRetrieve and write credentials\n"
  printf "  -s\tCreate symlinks into \${HOME}\n"
  printf "  -h\tPrint this help\n"
}

create_symlinks() {
  while IFS= read -r -d '' file; do
    local BASENAME_FILE
    BASENAME_FILE="$(basename "${file}")"

    if [[ -n ${FILE_LIMIT} ]] && [[ ${BASENAME_FILE} != "${FILE_LIMIT}" ]]; then
      continue
    fi

    [[ -r ${file} ]] && [[ -e ${file} ]] && rm -f "${HOME}/.${BASENAME_FILE}" && ln -s "${file}" "${HOME}/.${BASENAME_FILE}"
  done < <(find "${CURRENT_DIR}/symlinks" -type f -print0)
}

browse_install() {
  while IFS= read -r -d '' file; do
    local BASENAME_FILE
    BASENAME_FILE="$(basename "${file}")"

    if [[ -n ${FILE_LIMIT} ]] && [[ ${BASENAME_FILE} != "${FILE_LIMIT}" ]]; then
      continue
    fi

    local UPPERCASE_FILENAME
    UPPERCASE_FILENAME="$(printf "%s" "${BASENAME_FILE}" | tr "[:lower:]" "[:upper:]")"
    local DISABLE_VARIABLE_NAME="DOTFILES_NO_${UPPERCASE_FILENAME}"

    if [[ ${!DISABLE_VARIABLE_NAME:-} == "true" ]]; then
      continue
    fi

    if [[ -r ${file} ]]; then
      for action in "${@}"; do
        unset -f "${action}"
      done

      source "${file}"

      for action in "${@}"; do
        if [[ $(type -t "${action}") == "function" ]]; then
          print_title "${action} - ${BASENAME_FILE}"
          "${action}"
        fi
      done
    fi
  done < <(find "${CURRENT_DIR}/install" -type f -print0 | LC_ALL=C sort --zero-terminated)
}

clean_packages() {
  if command -v brew >/dev/null 2>&1; then
    brew cleanup -s
  elif command -v apt-get >/dev/null 2>&1; then
    sudo apt-get autoremove --yes
    sudo apt-get clean all
  fi
}

main() {
  local FILE_LIMIT=""
  local RUN_SYMLINKS=0
  local RUN_CLEAN=0
  local RUN_INSTALL=0
  local RUN_PASSWORDS=0

  while getopts ":l:acipsh" option; do
    case "${option}" in
    a)
      RUN_SYMLINKS=1
      RUN_CLEAN=1
      RUN_INSTALL=1
      RUN_PASSWORDS=1
      ;;
    c)
      RUN_CLEAN=1
      ;;
    h)
      usage
      return 1
      ;;
    i)
      RUN_INSTALL=1
      ;;
    p)
      RUN_PASSWORDS=1
      ;;
    s)
      RUN_SYMLINKS=1
      ;;
    l)
      FILE_LIMIT="${OPTARG}"
      printf "Limiting to %s\n" "${FILE_LIMIT}"
      ;;
    :)
      printf "option -%s requires a value\n" "${OPTARG}" >&2
      exit 1
      ;;
    \?)
      printf "option -%s is invalid\n" "${OPTARG}" >&2
      usage
      exit 2
      ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ ${RUN_SYMLINKS} -eq 1 ]]; then
    print_title "symlinks"
    create_symlinks
  fi

  mkdir -p "${HOME}/opt/bin"

  if [[ -e "${HOME}/.bashrc" ]]; then
    print_title "Sourcing ~/.bashrc"
    set +u
    set +e
    PS1="$" source "${HOME}/.bashrc"
    set -e
    set -u
  fi

  local ACTIONS=()

  if [[ ${RUN_CLEAN} -eq 1 ]]; then
    ACTIONS+=("clean")
  fi

  if [[ ${RUN_INSTALL} -eq 1 ]]; then
    ACTIONS+=("install")
  fi

  if [[ ${#ACTIONS[@]} -ne 0 ]]; then
    browse_install "${ACTIONS[@]}"
    clean_packages
  fi

  if [[ ${RUN_PASSWORDS} -eq 1 ]]; then
    browse_install credentials
  fi
}

main "${@}"
