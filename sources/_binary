#!/usr/bin/env bash

archive_to_binary() {
  if [[ ${#} -lt 2 ]]; then
    var_error "Usage: archive_to_binary ARCHIVE_URL BINARY_PATH [BINARY_DESTINATION=${HOME}/opt/bin/]"
    return 1
  fi

  local ARCHIVE_URL="${1}"
  shift
  local BINARY_PATH="${1}"
  shift
  local BINARY_DESTINATION="${1:-${HOME}/opt/bin/}"
  shift || true

  local ARCHIVE_FILENAME
  local ARCHIVE_EXTENSION
  if [[ ${ARCHIVE_URL} =~ .*\/(.*)\.(tar\.gz|zip) ]]; then
    ARCHIVE_FILENAME="${BASH_REMATCH[1]}"
    ARCHIVE_EXTENSION="${BASH_REMATCH[2]}"
  else
    var_error "archive_to_binary: unable to extract archive filename and extension from ${URL}"
    return 1
  fi

  local TEMP_FOLDER="/tmp"
  local ARCHIVE_PATH="${TEMP_FOLDER}/${ARCHIVE_FILENAME}.${ARCHIVE_EXTENSION}"

  curl -q -sSL --max-time 300 -o "${ARCHIVE_PATH}" -- "${ARCHIVE_URL}"
  (
    cd "${TEMP_FOLDER}" || false
    mkdir -p "${ARCHIVE_FILENAME}"

    if [[ ${ARCHIVE_EXTENSION} == "tar.gz" ]]; then
      tar xzf "${ARCHIVE_PATH}" -C "${ARCHIVE_FILENAME}"
    elif [[ ${ARCHIVE_EXTENSION} == "zip" ]]; then
      unzip "${ARCHIVE_PATH}" -d "${ARCHIVE_FILENAME}"
    fi

    mv "${ARCHIVE_FILENAME}/${BINARY_PATH}" "${BINARY_DESTINATION}"
    chmod +x "${BINARY_DESTINATION}/$(basename "${BINARY_PATH}")"
    rm -rf "${ARCHIVE_PATH:?}" "${ARCHIVE_FILENAME:?}"
  )
}

curl_to_binary() {
  if [[ ${#} -lt 2 ]]; then
    var_error "Usage: curl_to_binary BINARY_URL BINARY_NAME [BINARY_DESTINATION=${HOME}/opt/bin/]"
    return 1
  fi

  local BINARY_URL="${1}"
  shift
  local BINARY_NAME="${1}"
  shift
  local BINARY_DESTINATION="${1:-${HOME}/opt/bin/}"
  shift || true

  curl -q -sSL --max-time 300 -o "${BINARY_DESTINATION}/${BINARY_NAME}" -- "${BINARY_URL}"
  chmod +x "${BINARY_DESTINATION}/${BINARY_NAME}"
}
