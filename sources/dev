#!/usr/bin/env bash

alias dev='cd ${HOME}/code/'
alias work='cd ${HOME}/workspace/'
alias grep='grep --color=auto'
alias vi='vim'
alias fuck='sudo $(history -p \!\!)'

export EDITOR='vim'
export TERM='xterm-256color'

if command -v xdg-open >/dev/null 2>&1 && ! command -v open >/dev/null 2>&1; then
  alias open='xdg-open'
fi

if command -v mc >/dev/null 2>&1; then
  complete -C mc mc
fi

random() {
  openssl rand -hex "${1:-30}"
}

loop() {
  if [[ ${#} -lt 1 ]]; then
    var_red "Usage: loop command interval?(default 60s)"
    return 1
  fi

  while true; do
    ${1}
    sleep "${2:-60}"
  done
}

meteo() {
  curl --disable --silent --show-error --location --max-time 30 -4 "wttr.in/${1:-Paris}?m&format=v2"
}

if [[ ${OSTYPE} =~ ^darwin ]]; then
  temperature() {
    sudo powermetrics --samplers smc --sample-count 1 -i 1 | grep "temperature"
  }
fi

rainbow() {
  awk '
  BEGIN{
    s="          "; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
      r = 255-(colnum*255/76);
      g = (colnum*510/76);
      b = (colnum*255/76);
      if (g>255) g = 510-g;
      printf "\033[48;2;%d;%d;%dm", r,g,b;
      printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
      printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

if command -v vegeta >/dev/null 2>&1; then
  loadtest() {
    if [[ ${#} -lt 1 ]]; then
      var_red "Usage: loadtest URL RATE_PER_SECOND"
      return 1
    fi

    local URL=${1}
    shift
    local RATE=${1:-50}
    shift || true

    var_info "Attacking '${URL}' at ${RATE} request(s) per second during 30 seconds..."
    printf "GET %s" "${URL}" | vegeta attack -rate="${RATE}" -duration=30s | vegeta plot >vegeta.html && open vegeta.html
    sleep 5
    rm vegeta.html
  }
fi

if command -v systemctl >/dev/null 2>&1; then
  status() {
    sudo systemctl status "${@}"
  }

  restart() {
    sudo systemctl restart "${@}"
  }

  logs() {
    sudo journalctl -u "${@}"
  }
fi

if [[ -n ${JIRA_URL:-} ]]; then
  jira() {
    local open
    local branch

    while getopts ":ob" option; do
      case "${option}" in
      o)
        open="true"
        ;;
      b)
        branch="true"
        ;;
      :)
        printf "option -%s requires a value\n" "${OPTARG}" >&2
        return 1
        ;;
      \?)
        printf "option -%s is invalid\n" "${OPTARG}" >&2
        return 2
        ;;
      esac
    done

    shift $((OPTIND - 1))

    local JIRA_TICKET
    JIRA_TICKET="$(jira_ticket "${1:-}")"

    if [[ -z ${JIRA_TICKET:-} ]]; then
      return
    fi

    if [[ ${open} == "true" ]]; then
      open "${JIRA_URL}/browse/${JIRA_TICKET}"
    fi

    if [[ ${branch} == "true" ]] && [[ $(git rev-parse --is-inside-work-tree 2>&1) == "true" ]]; then
      local JIRA_BRANCH_NAME=""feat-${JIRA_TICKET}""

      local CHECKOUT_OPTION=""
      if ! git rev-parse --quiet --verify "${JIRA_BRANCH_NAME}" >/dev/null 2>&1; then
        CHECKOUT_OPTION+=" -b"
      fi

      git checkout ${CHECKOUT_OPTION} "${JIRA_BRANCH_NAME}"
    fi
  }

  jira_ticket() {
    local JIRA_USER
    JIRA_USER="$(passget "${JIRA_CREDENTIALS}" "login")"

    local JIRA_PASS
    JIRA_PASS="$(pass show "${JIRA_CREDENTIALS}" | head -1)"

    curl \
      --disable \
      --silent \
      --show-error \
      --location \
      --max-time 30 \
      --user "${JIRA_USER}:${JIRA_PASS}" \
      "${JIRA_URL}/rest/api/2/search?jql=status%20NOT%20IN%20%28Done%2C%20Resolved%29%20AND%20assignee%20%3D%20currentUser%28%29" |
      jq -r '.issues[] | .key + " " + .fields.summary' |
      fzf --height=20 --ansi --reverse --query="${1:-}" |
      awk '{print $1}'
  }
fi
