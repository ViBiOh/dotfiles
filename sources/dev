#!/usr/bin/env bash

alias dev='cd ${HOME}/code/'
alias work='cd ${HOME}/workspace/'
alias grep='grep --color=auto'
alias vi='vim'
alias fuck='sudo $(history -p \!\!)'

export EDITOR='vim'
export TERM='xterm-256color'

if command -v xdg-open >/dev/null 2>&1 && ! command -v open >/dev/null 2>&1; then
  alias open='xdg-open'
fi

if command -v mc >/dev/null 2>&1; then
  complete -C mc mc
fi

cipher() {
  gpg --symmetric --cipher-algo AES256 "${@}" | base64
}

decipher() {
  base64 -D | gpg --decrypt "${@}"
}

random() {
  openssl rand -hex "${1:-30}"
}

loop() {
  if [[ ${#} -lt 1 ]]; then
    var_red "Usage: 'loop command' [interval?(default 60s)]"
    return 1
  fi

  while true; do
    ${1}
    sleep "${2:-60}"
  done
}

meteo() {
  curl --disable --silent --show-error --location --max-time 30 -4 "wttr.in/${1:-Paris}?m&format=v2"
}

date_in() {
  local TZ
  TZ="$(rg --files /usr/share/zoneinfo/ | sed 's|/usr/share/zoneinfo/||' | fzf --height=20 --ansi --reverse --select-1 --query="${*:-New_York}")"

  printf "%b%s%b %b%s%b\n" "${BLUE}" "${TZ}" "${RESET}" "${YELLOW}" "$(TZ=${TZ} date '+%Y-%m-%d %H:%M:%S')" "${RESET}"
}

_fzf_complete_date_in() {
  FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
    rg --files /usr/share/zoneinfo/ | sed 's|/usr/share/zoneinfo/||'
  )
}

[[ -n ${BASH} ]] && complete -F _fzf_complete_date_in -o default -o bashdefault date_in

if [[ ${OSTYPE} =~ ^darwin ]]; then
  temperature() {
    sudo powermetrics --samplers smc --sample-count 1 -i 1 | grep -i "temperature"
    sudo powermetrics --samplers smc --sample-count 1 -i 1 | grep -i "fan"
  }
fi

rainbow() {
  awk '
  BEGIN{
    s="          "; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
      r = 255-(colnum*255/76);
      g = (colnum*510/76);
      b = (colnum*255/76);
      if (g>255) g = 510-g;
      printf "\033[48;2;%d;%d;%dm", r,g,b;
      printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
      printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

emergency() {
  var_confirm "Erase all data"

  sudo --reset-timestamp networksetup -setdnsservers "Wi-Fi" Empty
  sudo networksetup -setsearchdomains "Wi-Fi" Empty
  sudo networksetup -setdnsservers "USB 10/100/1000 LAN" Empty
  sudo networksetup -setsearchdomains "USB 10/100/1000 LAN" Empty

  _emergency_script_dir() {
    local FILE_SOURCE="${BASH_SOURCE[0]}"

    if [[ -L ${FILE_SOURCE} ]]; then
      dirname "$(readlink "${FILE_SOURCE}")"
    else
      (
        cd "$(dirname "${FILE_SOURCE}")" && pwd
      )
    fi
  }

  "$(_emergency_script_dir)/../init" -c

  ssh_agent_stop
  gpg_agent_stop

  sudo rm -rf \
    "${HOME}/.ssh" \
    "${HOME}/.gnupg" \
    "${HOME}/.local" \
    "${HOME}/.localrc" \
    "${HOME}/.config" \
    "${HOME}/.bash_history" \
    "${HOME}/.bash_profile" \
    "${PASSWORD_STORE_DIR:-${HOME}/.password-store}" \
    "${HOME}/code" \
    "${HOME}/opt" \
    "${HOME}/workspace" \
    "${HOME}/Documents" \
    "${HOME}/Library/Application Support/Sublime Text/Local/*" \
    "${HOME}/Library/Application Support/Sublime Merge/Local/*"
}

if command -v vegeta >/dev/null 2>&1; then
  loadtest() {
    if [[ ${#} -lt 1 ]]; then
      var_red "Usage: loadtest URL RATE_PER_SECOND"
      return 1
    fi

    local URL=${1}
    shift
    local RATE=${1:-50}
    shift || true

    var_info "Attacking '${URL}' at ${RATE} request(s) per second during 30 seconds..."
    printf "GET %s" "${URL}" | vegeta attack -rate="${RATE}" -duration=30s | vegeta plot >vegeta.html && open vegeta.html
    sleep 5
    rm vegeta.html
  }
fi

if command -v systemctl >/dev/null 2>&1; then
  status() {
    sudo systemctl status "${@}"
  }

  restart() {
    sudo systemctl restart "${@}"
  }

  logs() {
    sudo journalctl -u "${@}"
  }
fi

aziz() {
  curl --disable --silent --show-error --location --max-time 30 --request POST "http://${HUE_API}/api/groups/a66c32cb-c5ac-4060-9a39-e9a0742c2bea" --data state=on --data method=PATCH >/dev/null
}

if command -v hidapitester >/dev/null 2>&1; then
  # from https://ultracrepidarian.phfactor.net/2022/03/09/controlling-the-logitech-litra-on-macos/
  _hid_litra_glow() {
    hidapitester --vidpid "046D/C900" --open --length 20 --send-output "${1}"
  }

  # 2/17/22 Litra Glow aliases from https://github.com/kharyam/litra-driver/issues/13
  light() {
    _hid_litra_glow 0x11,0xff,0x04,0x1c,0x01
    _hid_litra_glow 0x11,0xff,0x04,0x4c,0x00,100
  }

  dark() {
    _hid_litra_glow 0x11,0xff,0x04,0x1c
  }
fi
