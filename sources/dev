#!/usr/bin/env bash

alias dev='cd ${HOME}/code/'
alias work='test -e ${HOME}/workspace/ && cd ${HOME}/workspace/ || dev'
alias grep='grep --color=auto'
alias vi='vim'
alias fuck='sudo $(history -p \!\!)'

export EDITOR='vim'
export TERM='xterm-256color'

if command -v xdg-open >/dev/null 2>&1 && ! command -v open >/dev/null 2>&1; then
  alias open='xdg-open'
fi

if command -v mc >/dev/null 2>&1; then
  complete -C mc mc
fi

qrcode() {
  qrencode -t UTF8
}

qrcode_wifi() {
  if [[ ${#} -lt 2 ]]; then
    var_red "Usage: qrcode_wifi SSID PASSWORD"
    return 1
  fi

  printf "WIFI:S:%s;T:WPA;P:%s;;" "${1}" "${2}" | qrcode
}

loop() {
  if [[ ${#} -lt 1 ]]; then
    var_red "Usage: 'loop command' [interval?(default 60s)]"
    return 1
  fi

  while true; do
    eval "${1}"
    sleep "${2:-60}"
  done
}

dot_env() {
  local DOTENV_FILE="${1:-.env}"

  if [[ -e ${DOTENV_FILE} ]]; then
    comm -13 <(declare) <(source "${DOTENV_FILE}" && declare)
  fi
}

urlencode() {
  local old_lc_collate="${LC_COLLATE-}"
  LC_COLLATE="C"

  local length="${#1}"
  for ((i = 0; i < length; i++)); do
    local c="${1:i:1}"
    case "${c}" in
    [a-zA-Z0-9.~_-]) printf "%s" "${c}" ;;
    ' ') printf "%%20" ;;
    *) printf '%%%02X' "'$c" ;;
    esac
  done

  LC_COLLATE="${old_lc_collate}"
}

meteo() {
  curl --disable --silent --show-error --location --max-time 30 -4 "wttr.in/$(urlencode "${1:-Paris}")?m&format=v2"
}

date_in() {
  local TZ
  TZ="$(rg --files /usr/share/zoneinfo/ | sed 's|/usr/share/zoneinfo/||' | fzf --height=20 --ansi --reverse --select-1 --query="${*:-New_York}")"

  printf "%b%s%b %b%s%b\n" "${BLUE}" "${TZ}" "${RESET}" "${YELLOW}" "$(TZ=${TZ} date '+%Y-%m-%d %H:%M:%S')" "${RESET}"
}

_fzf_complete_date_in() {
  FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
    rg --files /usr/share/zoneinfo/ | sed 's|/usr/share/zoneinfo/||'
  )
}

[[ -n ${BASH} ]] && complete -F _fzf_complete_date_in -o default -o bashdefault date_in

if [[ ${OSTYPE} =~ ^darwin ]]; then
  temperature() {
    sudo powermetrics --samplers smc --sample-count 1 -i 1 | grep -i -E "temperature|fan"
  }

  system_state() {
    printf "%bThermal%b\n" "${BLUE}" "${RESET}"
    pmset -g therm
    printf "%bAC Power adapter%b\n" "${BLUE}" "${RESET}"
    pmset -g ac
    printf "%bBattery%b\n" "${BLUE}" "${RESET}"
    pmset -g batt
  }
fi

rainbow() {
  awk '
  BEGIN{
    s="          "; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
      r = 255-(colnum*255/76);
      g = (colnum*510/76);
      b = (colnum*255/76);
      if (g>255) g = 510-g;
      printf "\033[48;2;%d;%d;%dm", r,g,b;
      printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
      printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

emergency() {
  var_confirm "Erase all data"

  sudo --reset-timestamp networksetup -setdnsservers "Wi-Fi" Empty
  sudo networksetup -setsearchdomains "Wi-Fi" Empty

  for interface in "USB 10/100/1000 LAN" "Thunderbolt Ethernet Slot 0" "Thunderbolt Ethernet Slot 1"; do
    if [[ $(sudo networksetup -listnetworkserviceorder | grep -c -i "${interface}") -gt 0 ]]; then
      sudo networksetup -setdnsservers "${interface}" Empty
      sudo networksetup -setsearchdomains "${interface}" Empty
    fi
  done

  _emergency_script_dir() {
    local FILE_SOURCE="${BASH_SOURCE[0]}"

    if [[ -L ${FILE_SOURCE} ]]; then
      dirname "$(readlink "${FILE_SOURCE}")"
    else
      (
        cd "$(dirname "${FILE_SOURCE}")" && pwd
      )
    fi
  }

  "$(_emergency_script_dir)/../init" -c

  ssh_agent_stop
  gpg_agent_stop

  sudo rm -rf \
    "${HOME}/.ssh" \
    "${HOME}/.gnupg" \
    "${HOME}/.local" \
    "${HOME}/.localrc" \
    "${HOME}/.config" \
    "${HOME}/.bash_history" \
    "${HOME}/.bash_profile" \
    "${PASSWORD_STORE_DIR:-${HOME}/.password-store}" \
    "${HOME}/code" \
    "${HOME}/opt" \
    "${HOME}/workspace" \
    "${HOME}/Documents" \
    "${HOME}/Library/Application Support/Sublime Text/Local/*" \
    "${HOME}/Library/Application Support/Sublime Merge/Local/*"

  # Clean broken symlinks in home directory
  find "${HOME}" -maxdepth 1 -type l ! -exec test -e {} \; -exec rm {} \;
}

if command -v vegeta >/dev/null 2>&1; then
  loadtest() {
    if [[ ${#} -lt 1 ]]; then
      var_red "Usage: loadtest URL"
      return 1
    fi

    local URL=${1}
    shift

    var_info "Attacking '${URL}' during 30 seconds..."
    printf "GET %s" "${URL}" | vegeta attack -duration=30s "${@}" | vegeta plot >vegeta.html && open vegeta.html
    sleep 5
    rm vegeta.html
  }
fi

if command -v systemctl >/dev/null 2>&1; then
  status() {
    sudo systemctl status "${@}"
  }

  restart() {
    sudo systemctl restart "${@}"
  }

  logs() {
    sudo journalctl -u "${@}"
  }
fi

aziz() {
  curl --disable --silent --show-error --location --max-time 30 --request POST "http://${HUE_API}/api/groups/a66c32cb-c5ac-4060-9a39-e9a0742c2bea" --data state=on --data method=PATCH >/dev/null
}

json() {
  jq -n -c "${@}"
}
