#!/usr/bin/env bash

docker_registry_clean() {
  read_variable_if_required DOCKER_REGISTRY "https://hub.docker.com/v2"
  read_variable_if_required DOCKER_OWNER
  read_variable_if_required DOCKER_USER
  read_variable_if_required DOCKER_PASSWORD "" "secret"

  local BLUE="\033[34m"
  local GREEN="\033[32m"
  local RED="\033[31m"
  local RESET="\033[0m"

  local HTTP_OUTPUT="http_output.txt"
  local HTTP_STATUS

  local CLIENT_ARGS=("curl" "-q" "-sS" "-o" "${HTTP_OUTPUT}" "-w" "%{http_code}")

  # Login to registry
  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X POST "${DOCKER_REGISTRY}/users/login/" \
    -H "Content-Type: application/json" \
    --data "{ \"username\": \"${DOCKER_USER}\", \"password\": \"${DOCKER_PASSWORD}\" }"
  )"
  unset DOCKER_PASSWORD

  if [[ "${HTTP_STATUS}" != "200" ]]; then
    echo -e "${RED}Unable to login to registry ${DOCKER_REGISTRY}${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  CLIENT_ARGS+=("-H" "Authorization: JWT $(python -c "import json; print(json.load(open('${HTTP_OUTPUT}'))['token'])")")
  rm "${HTTP_OUTPUT}"

  # Listing repositories
  echo -e "${BLUE}Listing repositories for ${DOCKER_OWNER}...${RESET}"

  HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/users/${DOCKER_OWNER}/repositories/?page_size=100")"
  if [[ "${HTTP_STATUS}" != "200" ]]; then
    echo -e "${RED}Unable to list images for ${DOCKER_OWNER}${RESET}"
    cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
    return
  fi

  local REPOSITORIES
  IFS=" " read -r -a REPOSITORIES <<< "$(python -c "import json; images = json.load(open('${HTTP_OUTPUT}')); print(' '.join([image['name'] for image in images]))")"
  rm "${HTTP_OUTPUT}"

  for repository in "${REPOSITORIES[@]}"; do
    echo -e "${BLUE}Listing tags for ${DOCKER_OWNER}/${repository}...${RESET}"

    HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X GET "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/?page_size=100")"
    if [[ "${HTTP_STATUS}" != "200" ]]; then
      echo -e "${RED}Unable to list tags for ${DOCKER_OWNER}/${repository}${RESET}"
      cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
      continue
    fi

    local TAGS
    IFS=" " read -r -a TAGS <<< "$(python -c "import json; tags = json.load(open('${HTTP_OUTPUT}')); print(' '.join([tag['name'] for tag in tags['results']]))")"
    rm "${HTTP_OUTPUT}"

    for tag in "${TAGS[@]}"; do
      if [[ "${tag}" != 'latest' ]] && [[ "${tag}" =~ ^[0-9A-Fa-f]{6,}$ ]]; then
        HTTP_STATUS="$("${CLIENT_ARGS[@]}" -X DELETE "${DOCKER_REGISTRY}/repositories/${DOCKER_OWNER}/${repository}/tags/${tag}/")"
        if [[ "${HTTP_STATUS}" != "204" ]]; then
          echo -e "${RED}Unable to delete tags for ${DOCKER_OWNER}/${repository}:${tag}${RESET}"
          cat "${HTTP_OUTPUT}" && rm "${HTTP_OUTPUT}"
          continue
        fi

        rm "${HTTP_OUTPUT}"
        echo -e "${GREEN}${DOCKER_OWNER}/${repository}:${tag} deleted!${RESET}"

      fi
    done

  done
}

if command -v docker > /dev/null 2>&1; then
  docker_restart() {
    docker start $(docker ps -a -q -f status=exited -f status=created 2>/dev/null) 2>/dev/null
  }

  export DOCKER_CONTENT_TRUST="1"
fi
