#!/usr/bin/env bash

github_last_release() {
  if [[ "${#}" -ne 1 ]]; then
    echo "Usage: github_last_release owner/repo"
    return 1
  fi

  local RED="\033[31m"
  local RESET="\033[0m"

  local OUTPUT_TXT="output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sS" "-o" "${OUTPUT_TXT}" "-w" "%{http_code}")

  local REQUEST_STATUS
  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "https://api.github.com/repos/${1}/releases/latest")"
  if [[ "${REQUEST_STATUS}" != "200" ]]; then
    echo -e "${RED}Unable to list latest release for ${1}${RESET}"
    cat "${OUTPUT_TXT}" && rm "${OUTPUT_TXT}"
    return
  fi

  python -c "import json; print(json.load(open('${OUTPUT_TXT}'))['tag_name'])"
  rm "${OUTPUT_TXT}"
}

export -f github_last_release

configure_repository() {
  if [[ "${#}" -ne 1 ]]; then
    echo "Usage: configure_repository owner/repo"
    return 1
  fi

  local RED="\033[31m"
  local RESET="\033[0m"

  local OUTPUT_TXT="output.txt"
  local CLIENT_ARGS=("curl" "-q" "-sS" "-o" "${OUTPUT_TXT}" "-w" "%{http_code}" "-H" "Authorization: token ${GITHUB_OAUTH_TOKEN}")

  local REQUEST_STATUS
  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Content-Type: application/json" "-X" "PATCH" "https://api.github.com/repos/${1}" "-d" '{
    "default_branch": "master",
    "allow_merge_commit": false,
    "allow_squash_merge": false,
    "allow_rebase_merge": true,
    "has_wiki": false,
    "has_projects": false
  }')"
  if [[ "${REQUEST_STATUS}" != "200" ]]; then
    echo -e "${RED}Unable to edit ${1}${RESET}"
    cat "${OUTPUT_TXT}" && rm "${OUTPUT_TXT}"
    return
  fi

  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.dorian-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/vulnerability-alerts")"
  if [[ "${REQUEST_STATUS}" != "204" ]]; then
    echo -e "${RED}Unable to enable vulnerability alerts for ${1}${RESET}"
    cat "${OUTPUT_TXT}" && rm "${OUTPUT_TXT}"
    return
  fi

  REQUEST_STATUS="$("${CLIENT_ARGS[@]}" "-H" "Accept: application/vnd.github.london-preview+json" "-X" "PUT" "https://api.github.com/repos/${1}/automated-security-fixes")"
  if [[ "${REQUEST_STATUS}" != "204" ]]; then
    echo -e "${RED}Unable to enable automated security fixes for ${1}${RESET}"
    cat "${OUTPUT_TXT}" && rm "${OUTPUT_TXT}"
    return
  fi

  rm "${OUTPUT_TXT}"
}
