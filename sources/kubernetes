#!/usr/bin/env bash

if command -v kubectl >/dev/null 2>&1; then
  __kube_ps1() {
    # preserve exit status
    local exit="${?}"

    printf " ☸️ %s" "$(kubectl config view --minify --output=jsonpath --template='{..current-context}/{..namespace}' 2>/dev/null)"

    return "${exit}"
  }

  if command -v fzf >/dev/null 2>&1; then
    kube() {
      get_kube_resources() {
        local RESOURCE="${1:-}"
        local QUERY="${2:-}"

        if [[ -n ${RESOURCE} ]] && [[ -z ${QUERY} ]]; then
          QUERY="${RESOURCE}"
          RESOURCE=""
        fi

        if [[ -z ${RESOURCE} ]]; then
          RESOURCE="deployments.apps"
        fi

        printf "%s/%s" "${RESOURCE}" "$(kubectl get "${RESOURCE}" --all-namespaces --output=json | jq -r '.items[].metadata | .namespace + "/" + .name' | fzf --height=20 --ansi --reverse -1 --query="${QUERY}")"
      }

      print_and_execute() {
        printf "%b%b%b\n" "${YELLOW}" "${@}" "${RESET}" 2>&1
        eval "${@}"
      }

      local ACTION="${1}"
      shift

      case ${ACTION} in
      "context")
        local CONTEXT
        CONTEXT="$(kubectl config get-contexts -o name | fzf --height=20 --ansi --reverse -1 --query="${1:-}")"

        if [[ -n ${CONTEXT:-} ]]; then
          KUBECONFIG=$(mktemp -t kubeconfig)
          export KUBECONFIG=${KUBECONFIG}
          cat "${HOME}/.kube/config" >>"${KUBECONFIG}"
          var_warning "kubectl config use-context '${CONTEXT}'"
          kubectl config use-context "${CONTEXT}"

          if [[ -n ${TMUX:-} ]]; then
            tmux setenv KUBECONFIG "${KUBECONFIG}"
          fi
        fi
        ;;

      "forward")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "services" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_PORT
          KUBE_PORT="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.ports[] | (.port|tostring) + "/" + .protocol' | fzf --height=20 --ansi --reverse -1 --query="${2:-}")"

          if [[ -n ${KUBE_PORT:-} ]]; then
            IFS='/' read -r -a ports <<<"${KUBE_PORT}"
            printf "%bForwarding %s from 4000 to %s%b\n" "${BLUE}" "${parts[0]}/${parts[1]}/${parts[2]}" "${ports[0]}" "${RESET}"
            print_and_execute "kubectl port-forward --namespace='${parts[1]}' '${parts[0]}/${parts[2]}' '4000:${ports[0]}'"
          fi
        fi
        ;;

      "image")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          print_and_execute "kubectl get '${parts[0]}' --namespace='${parts[1]}' '${parts[2]}' --output=json | jq -r '.spec.template.spec.containers[].image'"
        fi
        ;;

      "info")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "${@}")"

        if [[ -n ${parts[1]:-} ]]; then
          print_and_execute "kubectl get '${parts[0]}' --namespace='${parts[1]}' '${parts[2]}' --output=yaml"
        fi
        ;;

      "log" | "logs")
        local FIRST=""
        if ! [[ ${1:-} =~ ^- ]]; then
          FIRST="${1}"
          shift
        fi

        local SECOND=""
        if ! [[ ${1:-} =~ ^- ]]; then
          SECOND="${1}"
          shift
        fi

        IFS='/' read -r -a parts <<<"$(get_kube_resources "${FIRST}" "${SECOND}")"

        if [[ -n ${parts[1]:-} ]]; then
          local PODS_LABELS
          local FORCE_KUBECTL=0

          if [[ ${parts[0]} =~ ^cronjobs? ]]; then
            PODS_LABELS="job-name in ($(kubectl get jobs --namespace="${parts[1]}" --output json | jq --arg name "${parts[2]}" -r '.items[] | select(.metadata.ownerReferences[].name == $name) | .metadata.name' | paste -sd, -))"
            FORCE_KUBECTL=1
          elif [[ ${parts[0]} =~ ^jobs? ]]; then
            PODS_LABELS="job-name=${parts[2]}"
            FORCE_KUBECTL=1
          elif [[ ${parts[0]} =~ ^deployments? ]]; then
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.selector.matchLabels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          else
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.metadata.labels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          fi

          printf "%bTailing logs for %b%s%b where labels are %b%s%b\n" "${BLUE}" "${GREEN}" "${parts[0]}/${parts[1]}/${parts[2]}" "${BLUE}" "${YELLOW}" "${PODS_LABELS}" "${RESET}"

          if command -v stern >/dev/null 2>&1 && [[ ${FORCE_KUBECTL} -ne 1 ]]; then
            print_and_execute "stern --namespace='${parts[1]}' --selector='${PODS_LABELS}' ${*}"
          else
            print_and_execute "kubectl logs --namespace='${parts[1]}' --ignore-errors --prefix --all-containers=true --selector='${PODS_LABELS}' --follow ${*}"
          fi
        fi
        ;;

      "ns")
        kubectl get namespaces --output=json | jq -r '.items[].metadata.name' | fzf --height=20 --ansi --reverse -1 --query="${1:-}" | xargs kubectl config set-context --current --namespace
        ;;

      "restart")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "${@}")"

        if [[ -n ${parts[1]:-} ]]; then
          print_and_execute "kubectl rollout restart --namespace='${parts[1]}' '${parts[0]}' '${parts[2]}'"
        fi
        ;;

      "watch")
        print_and_execute "kubectl get pods --all-namespaces --watch ${*}"
        ;;

      *)
        var_error "Usage: kube ACTION"
        var_info "\nPossibles actions are                       | args\n"
        var_info " - context | Switch context                 | name query"
        var_info " - forward | Port-forward to a service      | name query, port number"
        var_info " - image   | Print image name               | name query"
        var_info " - info    | Print yaml output of an object | name query"
        var_info " - logs    | Tail logs                      | name query, additionnals 'kubectl logs' args..."
        var_info " - ns      | Change default namespace       | name query"
        var_info " - restart | Perform a rollout restart      | name query"
        var_info " - watch   | Watch pods of all namespaces   | additionnals 'kubectl get pods' args..."
        ;;
      esac
    }

    [[ -n ${BASH} ]] && complete -W "restart logs forward info image watch context ns" -o default -o bashdefault kube
  fi
fi

if command -v helm >/dev/null 2>&1 && command -v delta >/dev/null 2>&1; then
  helm_delta() {
    if [[ ${#} -lt 1 ]]; then
      var_error "Usage: helm_delta RELEASE_NAME [helm upgrade additionnal args...]"
      return 1
    fi

    local RELEASE_NAME="${1}"
    shift

    printf "%b" "$(helm status "${RELEASE_NAME}" --output=yaml | sed -n 's|^manifest: "||p' | sed 's|"$||')" | sed 's|\\\"|"|g' >"/tmp/${RELEASE_NAME}_helm.yaml"
    helm upgrade --debug --dry-run "${RELEASE_NAME}" ${*} | sed '1,/^MANIFEST:$/d' | grep --invert-match '^$' >"/tmp/${RELEASE_NAME}_new.yaml"
    delta "/tmp/${RELEASE_NAME}_helm.yaml" "/tmp/${RELEASE_NAME}_new.yaml"
    rm "/tmp/${RELEASE_NAME}_helm.yaml" "/tmp/${RELEASE_NAME}_new.yaml"

    if var_confirm "Perform upgrade"; then
      var_warning "helm upgrade '${RELEASE_NAME}' ${*}"
      helm upgrade "${RELEASE_NAME}" ${*}
    fi
  }
fi

if command -v helm >/dev/null 2>&1 && command -v yq >/dev/null 2>&1 && command -v rg >/dev/null 2>&1; then
  helm_crds_manifests() {
    local CHART_REPO
    CHART_REPO="$(helm repo list --output json | jq -r '.[].name' | fzf --height=20 --ansi --reverse -1 --query="${1:-}")"

    if [[ -z ${CHART_REPO} ]]; then
      return 1
    fi

    var_info "Repository: ${CHART_REPO}"

    local CHART_NAME
    CHART_NAME="$(helm search repo "${CHART_REPO}" --output json | jq -r '.[].name' | fzf --height=20 --ansi --reverse -1 --query="${2:-}")"

    if [[ -z ${CHART_NAME} ]]; then
      return 1
    fi

    var_info "Chart: ${CHART_NAME}"

    local CHART_VERSION
    CHART_VERSION="$(helm search repo "${CHART_NAME}" --output json --devel --versions | jq -r '.[].version' | fzf --height=20 --ansi --reverse -1 --query="${3:-}")"

    if [[ -z ${CHART_VERSION} ]]; then
      return 1
    fi

    var_info "Version: ${CHART_VERSION}"

    local CURRENT_DIR
    CURRENT_DIR="$(pwd)"

    (
      cd "/tmp" || false

      local CHART_BASENAME
      CHART_BASENAME="$(basename "${CHART_NAME}")"

      helm pull "${CHART_NAME}" --version "${CHART_VERSION}" --untar

      if [[ -d "${CHART_BASENAME}/crds/" ]]; then
        printf "%bCopying %b%s%b to current folder%b\n" "${BLUE}" "${YELLOW}" "$(find "${CHART_BASENAME}/crds" -type f -print0 | xargs -0 printf "%s, " | sed 's|, $||')" "${BLUE}" "${RESET}" 1>&2
        cp "${CHART_BASENAME}/crds/"* "${CURRENT_DIR}/"
      else
        var_warning "no crds/ folder in this chart, searching for definition..."
        rg -- "^kind: CustomResourceDefinition" "${CHART_BASENAME}/"
      fi

      rm -rf "${CHART_BASENAME}"
    )
  }
fi

if command -v kubeseal >/dev/null 2>&1; then
  kubeseal_raw() {
    if [[ ${#} -lt 3 ]]; then
      var_error "Usage: kubeseal_raw NAMESPACE NAME VALUE [kubeseal additionnal args...]"
      return 1
    fi

    local NAMESPACE=${1}
    shift
    local NAME=${1}
    shift
    local VALUE=${1}
    shift

    var_warning "printf '%s' '${VALUE}' | kubeseal --raw --from-file=/dev/stdin --namespace='${NAMESPACE}' --name '${NAME}' --scope 'namespace-wide' ${*}"
    printf "%s" "${VALUE}" | kubeseal --raw --from-file=/dev/stdin --namespace="${NAMESPACE}" --name "${NAME}" --scope "namespace-wide" ${*}
  }
fi
