#!/usr/bin/env bash

if command -v kubectl >/dev/null 2>&1; then
  __kube_ps1() {
    # preserve exit status
    local exit="${?}"

    local K8S_CONTEXT
    K8S_CONTEXT="$(kubectl config view --minify --output=jsonpath --template='{..current-context}' 2>/dev/null)"

    if [[ -n ${K8S_CONTEXT} ]]; then
      printf " ☸️ %s" "${K8S_CONTEXT}"
    fi

    return "${exit}"
  }

  if command -v fzf >/dev/null 2>&1 && command -v jq >/dev/null 2>&1 && command -v yq >/dev/null 2>&1; then
    kube() {
      _kube_resources() {
        local RESOURCE="${1:-}"
        local QUERY="${2:-}"

        if [[ -n ${RESOURCE} ]] && [[ -z ${QUERY} ]]; then
          QUERY="${RESOURCE}"
          RESOURCE=""
        fi

        if [[ -z ${RESOURCE} ]]; then
          RESOURCE="deployments.apps"
        fi

        printf "%s/%s" "${RESOURCE}" "$(kubectl get "${RESOURCE}" --all-namespaces --output=json | jq -r '.items[].metadata | .namespace + "/" + .name' | fzf --height=20 --ansi --reverse --select-1 --query="${QUERY}")"
      }

      _kube_print_and_run() {
        printf "%b%b%b\n" "${YELLOW}" "${@}" "${RESET}" 1>&2
        eval "${@}"
      }

      local ACTION="${1}"
      shift

      case ${ACTION} in
      "context")
        local CONTEXT
        CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}")"

        if [[ -n ${CONTEXT:-} ]]; then
          KUBECONFIG_TMP=$(mktemp)
          cp "${KUBECONFIG:-${HOME}/.kube/config}" "${KUBECONFIG_TMP}"
          export KUBECONFIG="${KUBECONFIG_TMP}"
          _kube_print_and_run "kubectl config use-context ${CONTEXT}"

          if [[ -n ${TMUX:-} ]]; then
            tmux setenv KUBECONFIG "${KUBECONFIG}"
          fi
        fi
        ;;

      "desc")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          local EXTRA_ARGS=""
          if [[ -n ${parts[1]:-} ]]; then
            local EXTRA_ARGS+=" --namespace=${parts[1]}"
          fi

          _kube_print_and_run "kubectl describe ${parts[0]}${EXTRA_ARGS} ${parts[2]}"
        fi
        ;;

      "env")
        IFS='/' read -r -a parts <<<"$(_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_CONTAINER
          KUBE_CONTAINER="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.template.spec.containers[].name' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}")"

          local ENV_FROMS
          ENV_FROMS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.template.spec.containers[] | select(.name == '\""${KUBE_CONTAINER}"\"') | if has("envFrom") then (.envFrom[] | to_entries | .[] | (.key | rtrimstr("Ref")) + "/" + .value.name) else "" end')"
          for envFrom in ${ENV_FROMS}; do
            IFS='/' read -r -a envConfig <<<"$(printf "%s" "${envFrom}")"
            local JQ_QUERY='.data | to_entries | .[] | .key + "=\"" + (.value | gsub("[\\n]"; "\\n")) + "\""'
            if [[ ${envConfig[0]} == "secret" ]]; then
              local JQ_QUERY='.data | to_entries | .[] | .key + "=\"" + (.value | @base64d | gsub("[\\n]"; "\\n")) + "\""'
            fi

            kubectl get "${envConfig[0]}" --namespace="${parts[1]}" "${envConfig[1]}" --output=json | jq -r "${JQ_QUERY}"
          done

          local ENV_VAR
          ENV_VAR="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.template.spec.containers[] | select(.name == '\""${KUBE_CONTAINER}"\"') | if has("env") then (.env[] | if (.value | type == "string") then (.name + "=\"" + (.value | gsub("[\\n]"; "\\n")) + "\"") else "" end) else "" end')"
          if [[ -n ${ENV_VAR} ]]; then
            printf "%s" "${ENV_VAR}"
          fi
        fi
        ;;

      "forward")
        IFS='/' read -r -a parts <<<"$(_kube_resources "services" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_PORT
          KUBE_PORT="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.ports[] | (.port|tostring) + "/" + .protocol' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}")"

          if [[ -n ${KUBE_PORT:-} ]]; then
            IFS='/' read -r -a ports <<<"${KUBE_PORT}"
            printf "%bForwarding %s from ${3:-4000} to %s%b\n" "${BLUE}" "${parts[0]}/${parts[1]}/${parts[2]}" "${ports[0]}" "${RESET}"
            _kube_print_and_run "kubectl port-forward --namespace=${parts[1]} ${parts[0]}/${parts[2]} ${3:-4000}:${ports[0]}"
          fi
        fi
        ;;

      "image")
        IFS='/' read -r -a parts <<<"$(_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          _kube_print_and_run "kubectl get ${parts[0]} --namespace=${parts[1]} ${parts[2]} --output=json | jq -r '.spec.template.spec.containers[].image'"
        fi
        ;;

      "info")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          local EXTRA_ARGS=""
          if [[ -n ${parts[1]:-} ]]; then
            local EXTRA_ARGS+=" --namespace=${parts[1]}"
          fi

          local QUERY="."
          if [[ ${parts[0]} =~ secrets? ]]; then
            QUERY=".data[] |= @base64d"
          fi

          _kube_print_and_run "kubectl get ${parts[0]}${EXTRA_ARGS} ${parts[2]} --output=yaml | yq eval --prettyPrint '${QUERY}'"
        fi
        ;;

      "log" | "logs")
        local FIRST=""
        if ! [[ ${1:-} =~ ^- ]]; then
          FIRST="${1}"
          shift
        fi

        local SECOND=""
        if ! [[ ${1:-} =~ ^- ]]; then
          SECOND="${1}"
          shift
        fi

        IFS='/' read -r -a parts <<<"$(_kube_resources "${FIRST}" "${SECOND}")"

        if [[ -n ${parts[1]:-} ]]; then
          local PODS_LABELS

          if [[ ${parts[0]} =~ ^cronjobs? ]]; then
            PODS_LABELS="job-name in ($(kubectl get jobs --namespace="${parts[1]}" --output json | jq --arg name "${parts[2]}" -r '.items[] | select(.metadata.ownerReferences[].name == $name) | .metadata.name' | paste -sd, -))"
          elif [[ ${parts[0]} =~ ^jobs? ]]; then
            PODS_LABELS="job-name=${parts[2]}"
          elif [[ ${parts[0]} =~ ^deployments? ]]; then
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.selector.matchLabels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          else
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.metadata.labels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          fi

          printf "%bTailing logs for %b%s%b where labels are %b%s%b\n" "${BLUE}" "${GREEN}" "${parts[0]}/${parts[1]}/${parts[2]}" "${BLUE}" "${YELLOW}" "${PODS_LABELS}" "${RESET}"

          if command -v kail >/dev/null 2>&1; then
            _kube_print_and_run "kail --ns='${parts[1]}' --label='${PODS_LABELS}' --since=24h ${*}"
          else
            _kube_print_and_run "kubectl logs --namespace=${parts[1]} --ignore-errors --prefix --all-containers=true --selector='${PODS_LABELS}' --follow --since=24h ${*}"
          fi
        fi
        ;;

      "ns")
        kubectl get namespaces --output=json | jq -r '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}" | xargs kubectl config set-context --current --namespace
        ;;

      "restart")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[1]:-} ]]; then
          _kube_print_and_run "kubectl rollout restart --namespace=${parts[1]} ${parts[0]} ${parts[2]}"
        fi
        ;;

      "watch")
        _kube_print_and_run "kubectl get pods --all-namespaces --watch ${*}"
        ;;

      *)
        printf "%bUsage: kube ACTION%b\n" "${RED}" "${RESET}" 1>&2
        printf "%b\nPossibles actions are                            | args\n%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - context | Switch context                      | <context name>%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - desc    | Describe an object                  | <object type or deployment name> <object name>?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - env     | Generate .env file from deployments | <deployment name> <container name>?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - forward | Port-forward to a service           | <service name> <service port number>? <exposed port number>? (default 4000)%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - image   | Print image name                    | <deployment name>%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - info    | Print yaml output of an object      | <object type or deployment name> <object name>?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - logs    | Tail logs                           | <object type or deployment name> <object name>? <any additionnals 'kubectl logs' args...>%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - ns      | Change default namespace            | <namespace name>%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - restart | Perform a rollout restart           | <object type or deployment name> <object name>?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - watch   | Watch pods of all namespaces        | <any additionnals 'kubectl get pods' args...>%b\n" "${BLUE}" "${RESET}" 1>&2
        ;;
      esac
    }

    _fzf_complete_kube() {
      if [[ ${COMP_CWORD} -eq 1 ]]; then
        mapfile -t COMPREPLY < <(compgen -W "context desc env forward image info logs ns restart watch" -- "${COMP_WORDS[COMP_CWORD]}")
        return
      fi

      case ${COMP_WORDS[COMP_CWORD - 1]} in
      "context")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl config get-contexts --output name
        )
        ;;

      "forward")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get services --all-namespaces --output=json | jq -r '.items[].metadata.name'
        )
        ;;

      "env")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get deployments.apps --all-namespaces --output=json | jq -r '.items[].metadata.name'
        )
        ;;

      "image")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get deployments.apps --all-namespaces --output=json | jq -r '.items[].metadata.name'
        )
        ;;

      "ns")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get namespaces --output=json | jq -r '.items[].metadata.name'
        )
        ;;
      esac
    }

    [[ -n ${BASH} ]] && complete -F _fzf_complete_kube -o default -o bashdefault kube
  fi
fi

if command -v helm >/dev/null 2>&1 && command -v delta >/dev/null 2>&1 && command -v fzf >/dev/null 2>&1 && command -v jq >/dev/null 2>&1 && command -v yq >/dev/null 2>&1 && command -v rg >/dev/null 2>&1; then
  helm_select_chart() {
    local CHART_REPOSITORY
    CHART_REPOSITORY="$(helm repo list --output json | jq -r '.[].name' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}")"
    if [[ -z ${CHART_REPOSITORY} ]]; then
      return 1
    fi

    var_info "Repository: ${CHART_REPOSITORY}"

    local CHART_NAME
    CHART_NAME="$(helm search repo "${CHART_REPOSITORY}/" --output json | jq -r '.[].name' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}")"
    if [[ -z ${CHART_NAME} ]]; then
      return 1
    fi

    var_info "Chart: ${CHART_NAME}"

    local CHART_VERSION
    CHART_VERSION="$(helm search repo "${CHART_NAME}" --output json --devel --versions | jq -r '.[].version' | fzf --height=20 --ansi --reverse --select-1 --query="${3:-}")"

    if [[ -z ${CHART_VERSION} ]]; then
      return 1
    fi

    var_info "Version: ${CHART_VERSION}"

    printf "%s@%s" "${CHART_NAME}" "${CHART_VERSION}"
  }

  helm_delta() {
    IFS='/' read -r -a release <<<"$(helm list --all-namespaces --output yaml | yq eval '.[] | .namespace + "/" + .name' - | fzf --height=20 --ansi --reverse)"
    if [[ -z ${release[0]:-} ]] || [[ -z ${release[1]:-} ]]; then
      return 1
    fi

    local NAMESPACE="${release[0]}"
    local NAME="${release[1]}"
    var_info "Release: ${NAMESPACE}/${NAME}"

    IFS='@' read -r -a chart <<<"$(helm_select_chart "" "" "")"
    if [[ -z ${chart[0]:-} ]] || [[ -z ${chart[1]:-} ]]; then
      return 1
    fi

    local CHART="${chart[0]}"
    local VERSION="${chart[1]}"

    extract_manifest() {
      yq eval '.manifest' - | yq eval --prettyPrint 'sortKeys(..)' -
    }

    local TEMP_FOLDER
    TEMP_FOLDER="$(mktemp -d)"

    helm status --output=yaml --namespace="${NAMESPACE}" "${NAME}" | extract_manifest >"${TEMP_FOLDER}/${NAME}_helm.yaml"
    helm upgrade --output=yaml --namespace="${NAMESPACE}" "${NAME}" "${CHART}" --version "${VERSION}" --debug --dry-run ${*} | extract_manifest >"${TEMP_FOLDER}/${NAME}_new.yaml"
    delta "${TEMP_FOLDER}/${NAME}_helm.yaml" "${TEMP_FOLDER}/${NAME}_new.yaml"
    rm -rf "${TEMP_FOLDER}"

    if var_confirm "Perform upgrade"; then
      var_print_and_run "helm upgrade --namespace=${NAMESPACE} ${NAME} ${CHART} --version ${VERSION} ${*}"
    fi
  }

  helm_crds_manifests() {
    IFS='@' read -r -a chart <<<"$(helm_select_chart "" "" "")"
    if [[ -z ${chart[0]:-} ]] || [[ -z ${chart[1]:-} ]]; then
      return 1
    fi

    local CHART="${chart[0]}"
    local VERSION="${chart[1]}"

    local CURRENT_DIR
    CURRENT_DIR="$(pwd)"

    (
      local TEMP_FOLDER
      TEMP_FOLDER="$(mktemp -d)"
      cd "${TEMP_FOLDER}" || false

      local CHART_BASENAME
      CHART_BASENAME="$(basename "${CHART}")"

      helm pull "${CHART}" --version "${VERSION}" --untar

      if [[ -d "${CHART_BASENAME}/crds/" ]]; then
        printf "%bCopying %b%s%b to current folder%b\n" "${BLUE}" "${YELLOW}" "$(find "${CHART_BASENAME}/crds" -type f -print0 | xargs -0 printf "%s, " | sed 's|, $||')" "${BLUE}" "${RESET}" 1>&2
        cp "${CHART_BASENAME}/crds/"* "${CURRENT_DIR}/"
      else
        var_warning "no crds/ folder in this chart, searching for definition..."
        rg -- "^kind: CustomResourceDefinition" "${CHART_BASENAME}/"
      fi

      rm -rf "${CHART_BASENAME}" "${TEMP_FOLDER}"
    )
  }
fi

if command -v kubeseal >/dev/null 2>&1 && command -v rg >/dev/null 2>&1; then
  kubeseal_raw() {
    local NAMESPACE
    var_shift_or_read NAMESPACE "${1:-}"
    shift || true

    local NAME
    var_shift_or_read NAME "${1:-}"
    shift || true

    local CONTENT
    var_shift_or_read CONTENT "${1:-}"
    shift || true

    local CERT=""
    CERT="$(rg --files --glob '*.{pem,crt}' | fzf --height=20 --ansi --reverse)"

    local SCOPE=""
    SCOPE="$(printf "strict\nnamespace-wide\ncluster-wide" | fzf --height=20 --ansi --reverse)"

    local SAFE_CONTENT
    SAFE_CONTENT="$(printf "%s" "${CONTENT}" | sed "s|'|\\\'|g")"

    var_print_and_run "printf '%s' $'${SAFE_CONTENT}' | kubeseal --raw --from-file=/dev/stdin --namespace='${NAMESPACE}' --name='${NAME}' --scope='${SCOPE}' --cert='${CERT}' | pbcopy"
  }
fi
