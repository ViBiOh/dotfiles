<snippet>
		<content><![CDATA[
func Test${1:FuncName}(t *testing.T) {
	var cases = []struct {
		intention string
		request    *http.Request
		want       string
		wantStatus int
	}{
		{
			"simple",
			httptest.NewRequest(http.MethodGet, "/", nil),
			"",
			http.StatusOK,
		},
	}

	for _, testCase := range cases {
			t.Run(testCase.intention, func(t *testing.T) {
				writer := httptest.NewRecorder()

				${1:FuncName}(writer, testCase.request)

				if result := writer.Code; result != testCase.wantStatus {
					t.Errorf("${1:FuncName}(%#v) = %d, want status %d", testCase.request, result, testCase.wantStatus)
				}

				if result, _ := request.ReadBody(writer.Result().Body); string(result) != testCase.want {
					t.Errorf("${1:FuncName}(%#v) = `%s`, want `%s`", testCase.request, string(result), testCase.want)
				}
			})
	}
}

]]></content>
		<tabTrigger>gth</tabTrigger>
		<scope>source.go</scope>
		<description>Golang Test with HTTP</description>
</snippet>
