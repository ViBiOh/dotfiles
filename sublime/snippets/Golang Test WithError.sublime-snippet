<snippet>
		<content><![CDATA[
func Test_${1:FuncName}(t *testing.T) {
	var cases = []struct {
		intention string
		input   string
		want    bool
		wantErr error
	}{
		{
			"should work with given params",
			"test",
			false,
			errors.New("Error while testing"),
		},
	}

	var failed bool

	for _, testCase := range cases {
		result, err := ${1:FuncName}(testCase.input)

		failed = false

		if err == nil && testCase.wantErr != nil {
			failed = true
		} else if err != nil && testCase.wantErr == nil {
			failed = true
		} else if err != nil && err.Error() != testCase.wantErr.Error() {
			failed = true
		} else if result != testCase.want {
			failed = true
		}

		if failed {
			t.Errorf("%s\n${1:FuncName}(`%s`) = (%+v, %+v), want (%+v, %+v)", testCase.intention, testCase.input, result, err, testCase.want, testCase.wantErr)
		}
	}
}

]]></content>
		<tabTrigger>gte</tabTrigger>
		<scope>source.go</scope>
		<description>Golang Test with Error</description>
</snippet>
