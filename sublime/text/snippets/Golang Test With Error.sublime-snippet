<snippet>
		<content><![CDATA[
func Test${1:FuncName}(t *testing.T) {
	var cases = []struct {
		intention string
		input   string
		want    bool
		wantErr error
	}{
		{
			"simple",
			"test",
			false,
			errors.New("Error while testing"),
		},
	}

	for _, testCase := range cases {
		t.Run(testCase.intention, func(t *testing.T) {
			result, err := ${1:FuncName}(testCase.input)

			failed := false

			if testCase.wantErr != nil && !errors.Is(err, testCase.wantErr) {
				failed = true
			} else if result != testCase.want {
				failed = true
			}

			if failed {
				t.Errorf("${1:FuncName}() = (%v, `%s`), want (%v, `%s`)", result, err, testCase.want, testCase.wantErr)
			}
		})
	}
}

]]></content>
		<tabTrigger>gte</tabTrigger>
		<scope>source.go</scope>
		<description>Golang Test with Error</description>
</snippet>
