<snippet>
	<content><![CDATA[
func Test${1:FuncName}(t *testing.T) {
	type args struct {
		content string
	}

	var cases = []struct {
		intention string
		args      args
		want      bool
		wantErr   error
	}{
		{
			"simple",
			args{
				content: "test",
			},
			false,
			errors.New("Error while testing"),
		},
	}

	for _, tc := range cases {
		t.Run(tc.intention, func(t *testing.T) {
			got, gotErr := ${1:FuncName}(tc.args.content)

			failed := false

			if !errors.Is(gotErr, tc.wantErr) {
				failed = true
			} else if got != tc.want {
				failed = true
			}

			if failed {
				t.Errorf("${1:FuncName}() = (%t, `%s`), want (%t, `%s`)", got, gotErr, tc.want, tc.wantErr)
			}
		})
	}
}

]]></content>
	<tabTrigger>gte</tabTrigger>
	<scope>source.go</scope>
	<description>Golang Test with Error</description>
</snippet>
