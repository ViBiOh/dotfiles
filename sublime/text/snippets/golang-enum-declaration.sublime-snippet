<snippet>
	<content><![CDATA[
//go:generate stringer -type=${1:EnumName}
type ${1:EnumName} int

const (
	Default ${1:EnumName} = iota
	Other
)

var ErrUnknown${1:EnumName} = errors.New("unknown ${1:EnumName}")

func Parse${1:EnumName}(value string) (${1:EnumName}, error) {
	var previous, current uint8

	for i := 1; i < len(_${1:EnumName}_index); i++ {
		current = _${1:EnumName}_index[i]

		if strings.EqualFold(_${1:EnumName}_name[previous:current], value) {
			return ${1:EnumName}(i - 1), nil
		}

		previous = current
	}

	return Default, fmt.Errorf("parse `%s`: %w", value, ErrUnknown${1:EnumName})
}

func (e ${1:EnumName}) MarshalJSON() ([]byte, error) {
	buffer := bytes.NewBufferString(`"`)
	buffer.WriteString(e.String())
	buffer.WriteString(`"`)
	return buffer.Bytes(), nil
}

func (e *${1:EnumName}) UnmarshalJSON(b []byte) error {
	var strValue string

	if err := json.Unmarshal(b, &strValue); err != nil {
		return fmt.Errorf("unmarshal ${1:EnumName}: %w", err)
	}

	value, err := Parse${1:EnumName}(strValue)
	if err != nil {
		return err
	}

	*e = value

	return nil
}

]]></content>
	<tabTrigger>ged</tabTrigger>
	<scope>source.go</scope>
	<description>Golang Enum Declaration</description>
</snippet>
