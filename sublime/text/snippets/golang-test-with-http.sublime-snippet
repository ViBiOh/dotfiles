<snippet>
	<content><![CDATA[
func Test${1:FuncName}(t *testing.T) {
	cases := []struct {
		intention string
		request    *http.Request
		want       string
		wantStatus int
		wantHeader http.Header
	}{
		{
			"simple",
			httptest.NewRequest(http.MethodGet, "/", nil),
			"",
			http.StatusOK,
			http.Header{},
		},
	}

	for _, tc := range cases {
		t.Run(tc.intention, func(t *testing.T) {
			writer := httptest.NewRecorder()
			${1:FuncName}(writer, tc.request)

			if got := writer.Code; got != tc.wantStatus {
				t.Errorf("${1:FuncName} = HTTP/%d, want HTTP/%d", got, tc.wantStatus)
			}

			if got, _ := request.ReadBodyResponse(writer.Result()); string(got) != tc.want {
				t.Errorf("${1:FuncName} = `%s`, want `%s`", string(got), tc.want)
			}

			for key := range tc.wantHeader {
				want := tc.wantHeader.Get(key)
				if got := writer.Header().Get(key); got != want {
					t.Errorf("`%s` Header = `%s`, want `%s`", key, got, want)
				}
			}
		})
	}
}

]]></content>
	<tabTrigger>gth</tabTrigger>
	<scope>source.go</scope>
	<description>Golang Test with HTTP</description>
</snippet>
