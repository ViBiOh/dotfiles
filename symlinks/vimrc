" Turnoff vi backward compatibility
set nocompatible

" vim-plug
call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'airblade/vim-gitgutter'
Plug 'prabirshrestha/vim-lsp'

call plug#end()

" Show status line
set laststatus=2

highlight StatusLine ctermfg=235 ctermbg=11
highlight User1 ctermfg=11 ctermbg=238
highlight User2 ctermfg=232 ctermbg=154
highlight User3 ctermfg=2 ctermbg=235
highlight clear SignColumn

set statusline=
set statusline+=%1*\ \%f " Filename
set statusline+=%2*\%m" Modified
set statusline+=%*\%R " Read-Only indicator
set statusline+=%=
set statusline+=%3*\%y " Type of file
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=%1*\ %p%% " Percentage of the file
set statusline+=\ %l:%c " Line Number and Total Line
set statusline+=\  " Empty space at end

" Line highlight
set cursorline

" Show line numbers
set number

" Default file encoding
set encoding=utf-8

" Show current command combination on bottom right
set showcmd

" Confirm change save
set confirm

" Wrap lines
set wrap

" Spaces tab's width and indent size
set tabstop=2 shiftwidth=2
if exists(':filetype')
  filetype indent on
  filetype plugin on
endif

" Show matching parenthesis
set showmatch

" Insert spaces instead of tabs
set expandtab

" Backspace behavior for corresponding to most common apps
set backspace=indent,eol,start

" Hightlight search
set hlsearch

" SignColumn configuration
set signcolumn=number

" Clear highlight when pressing escape
nnoremap <esc> :nohlsearch<return><esc>
nnoremap <esc>^[ <esc>^[

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Search as you type character
set incsearch

" Ignore case in search
set ignorecase

" Search with smart case (if uppercase provided, search is case sensitive)
set smartcase

" Omni completion
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete

" Auto reload file
set autoread

" Disable folding
set nofoldenable

" No bell
set visualbell
set noerrorbells

" Disable backup files
set nobackup
set nowritebackup
set noswapfile

" Increase update time
set updatetime=300

" Enable syntax color if exist
if exists(":syntax")
  syntax on
endif

" Change map leader if possible
if exists(":let")
  let mapleader=","
endif

" Navigation shortcut
nmap <silent> gb <C-o>

" Disabling viminfo
set viminfo=""

" Turn on the Wild menu, better suggestion
set wildmenu

" Be lazy when redrawing screen
set lazyredraw

" Printing whitespace characters differently
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Search using ctrl-p and fzf
set rtp+=~/opt/fzf
noremap <C-p> :FZF<return>

" vim-gutter configuration
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" vim-lsp configuration
if executable('pyls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'pyls',
      \ 'cmd': {server_info->['pyls']},
      \ 'allowlist': ['python'],
      \ })
endif

if executable('gopls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'gopls',
      \ 'cmd': {server_info->['gopls']},
      \ 'allowlist': ['go'],
      \ })
endif

if executable('javascript-typescript-stdio')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'javascript-typescript-stdio',
      \ 'cmd': {server_info->['javascript-typescript-stdio']},
      \ 'allowlist': ['javascript', 'javascriptreact'],
      \ })
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> <leader>n <plug>(lsp-next-diagnostic)
  nmap <buffer> <leader>N <plug>(lsp-previous-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  nmap <buffer> <C-r> <plug>(lsp-document-symbol)
endfunction

if exists(":let")
  let g:lsp_signs_warning = {'text': '‼'}
  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_float_delay = 300
endif

function! Smart_TabComplete()
  let line = getline('.')

  let substr = strpart(line, -1, col('.')+1)
  let substr = matchstr(substr, "[^ \t]*$")

  if (strlen(substr)==0)
    return "\<tab>"
  endif

  if (match(substr, '\/') != -1)
    return "\<C-X>\<C-F>"
  endif

  return "\<C-X>\<C-O>"
endfunction

inoremap <tab> <c-r>=Smart_TabComplete()<CR>

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Using ripgrep for searching
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  nnoremap <Leader>g :silent lgrep -P<Space>
endif

" Opening quickfix automatically
if exists(':autocmd')
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow
endif

" Save file with sudo permission
if exists(':execute')
  command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
endif
