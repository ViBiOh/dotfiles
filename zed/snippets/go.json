{
  "Golang Mockgen Generate": {
    "prefix": "gmg",
    "body": [
      "//go:generate mockgen -source=\\$GOFILE -destination=mocks/\\$GOFILE -package=mocks -mock_names ${1:InterfaceName}=${1:InterfaceName}"
    ],
    "description": "Golang Mockgen Generate"
  },
  "Golang App Pattern": {
    "prefix": "gap",
    "body": [
      "type Service struct {",
      "  ${1:FlagName} string",
      "}",
      "",
      "type Config struct {",
      "  ${1:FlagName} string",
      "}",
      "",
      "func Flags(fs *flag.FlagSet, prefix string, overrides ...flags.Override) *Config {",
      "  var config Config",
      "",
      "  flags.New(\"${2:FlagValue}\", \"${3:FlagDesc}\").Prefix(prefix).DocPrefix(\"{4:FlagPrefix}\").StringVar(fs, &config.${1:FlagName}, \"\", overrides)",
      "",
      "  return &config",
      "}",
      "",
      "func New(config *Config) Service {",
      "  return Service{",
      "    ${1:FlagName}: config.${1:FlagName},",
      "  }",
      "}"
    ],
    "description": "Golang App Pattern"
  },
  "Golang Option": {
    "prefix": "gop",
    "body": [
      "type ${1:Object}Option func(${2:Struct}) ${2:Struct}",
      "",
      "func With${3:Name}(${4:Field} ${5:Type}) ${1:Object}Option {",
      "  return func(instance ${2:Struct}) ${2:Struct} {",
      "    instance.${4:Field} = ${4:Field}",
      "",
      "    return instance",
      "  }",
      "}"
    ],
    "description": "Golang Option"
  },
  "Golang Enum": {
    "prefix": "ge",
    "body": [
      "//go:generate stringer -type=${1:EnumName}",
      "type ${1:EnumName} int",
      "",
      "const (",
      "  Default ${1:EnumName} = iota",
      "  Other",
      ")",
      "",
      "var ErrUnknown${1:EnumName} = errors.New(\"unknown ${1:EnumName}\")",
      "",
      "func Parse${1:EnumName}(value string) (${1:EnumName}, error) {",
      "  var previous, current uint8",
      "",
      "  for i := 1; i < len(_${1:EnumName}_index); i++ {",
      "    current = _${1:EnumName}_index[i]",
      "",
      "    if strings.EqualFold(_${1:EnumName}_name[previous:current], value) {",
      "      return ${1:EnumName}(i - 1), nil",
      "    }",
      "",
      "    previous = current",
      "  }",
      "",
      "  return Default, fmt.Errorf(\"parse `%s`: %w\", value, ErrUnknown${1:EnumName})",
      "}",
      "",
      "func (e ${1:EnumName}) MarshalJSON() ([]byte, error) {",
      "  buffer := bytes.NewBufferString(`\"`)",
      "  buffer.WriteString(e.String())",
      "  buffer.WriteString(`\"`)",
      "  return buffer.Bytes(), nil",
      "}",
      "",
      "func (e *${1:EnumName}) UnmarshalJSON(b []byte) error {",
      "  var strValue string",
      "",
      "  if err := json.Unmarshal(b, &strValue); err != nil {",
      "    return fmt.Errorf(\"unmarshal ${1:EnumName}: %w\", err)",
      "  }",
      "",
      "  value, err := Parse${1:EnumName}(strValue)",
      "  if err != nil {",
      "    return err",
      "  }",
      "",
      "  *e = value",
      "",
      "  return nil",
      "}"
    ],
    "description": "Golang Enum"
  },
  "Golang Simple Test": {
    "prefix": "gst",
    "body": [
      "import (",
      "  \"testing\"",
      "",
      "  \"github.com/stretchr/testify/assert\"",
      ")",
      "",
      "func Test${1:FuncName}(t *testing.T) {",
      "  t.Parallel()",
      "",
      "  t.Run(\"success\", func(t *testing.T) {",
      "    t.Parallel()",
      "",
      "    actual := ${1:FuncName}()",
      "",
      "    assert.Equal(t, true, actual)",
      "  })",
      "}"
    ],
    "description": "Golang Simple Test"
  },
  "Golang Array Test": {
    "prefix": "gat",
    "body": [
      "import (",
      "  \"testing\"",
      "",
      "  \"github.com/stretchr/testify/assert\"",
      ")",
      "",
      "func Test${1:FuncName}(t *testing.T) {",
      "  t.Parallel()",
      "",
      "  type args struct {",
      "    content string",
      "  }",
      "",
      "  cases := map[string]struct {",
      "  args      args",
      "  want      bool",
      "  }{",
      "    \"simple\": {",
      "      args{",
      "        content: \"test\",",
      "},",
      "      true,",
      "    },",
      "  }",
      "",
      "  for intention, testCase := range cases {",
      "    t.Run(intention, func(t *testing.T) {",
      "      t.Parallel()",
      "",
      "      actual := ${1:FuncName}(testCase.args.content)",
      "",
      "      assert.Equal(t, testCase.want, actual)",
      "    })",
      "  }",
      "}"
    ],
    "description": "Golang Array Test"
  },
  "Golang Benchmark": {
    "prefix": "gb",
    "body": [
      "func Benchmark${1:FuncName}(b *testing.B) {",
      "  b.ResetTimer()",
      "  for i := 0; i < b.N; i++ {",
      "    ${1:FuncName}()",
      "  }",
      "}"
    ],
    "description": "Golang Benchmark"
  },
  "Golang Init Mock": {
    "prefix": "gim",
    "body": [
      "type mocks${1:Instance} struct {",
      "  ${2:Field} *mocks.${3:FieldType}",
      "}",
      "",
      "func initMocks${1:Instance}(t *testing.T) (${1:Instance}, mocks${1:Instance}) {",
      "  t.Helper()",
      "",
      "  ctrl := gomock.NewController(t)",
      "",
      "  ${2:Field} := mocks.New${3:FieldType}(ctrl)",
      "",
      "  return New${1:Instance}(${2:Field}), mocks${1:Instance}{",
      "    ${2:Field}:   ${2:Field},",
      "  }",
      "}"
    ],
    "description": "Golang Init Mock"
  },
  "Golang Sort Struct": {
    "prefix": "gss",
    "body": [
      "// ${1:SortName} sort ${2:Struct} by ${3:Comment}",
      "type ${1:SortName} []${2:Struct}",
      "",
      "func (a ${1:SortName}) Len() int      { return len(a) }",
      "func (a ${1:SortName}) Swap(i, j int) { a[i], a[j] = a[j], a[i] }",
      "func (a ${1:SortName}) Less(i, j int) bool {",
      "  return a[i].${4:Property} < a[j].${4:Property}",
      "}"
    ],
    "description": "Golang Sort Struct"
  },
  "Golang Debug Print": {
    "prefix": "gdp",
    "body": ["fmt.Printf(\"%[1]T(%#[1]v) ~= `%[1]s`\n\", ${1:var})"],
    "description": "Golang Debug Print"
  },
  "Golang Profile Handler": {
    "prefix": "gph",
    "body": [
      "import _ \"net/http/pprof\"",
      "go func() {",
      "  fmt.Println(http.ListenAndServe(\"localhost:9999\", http.DefaultServeMux))",
      "}()"
    ],
    "description": "Golang Profile Handler"
  }
}
